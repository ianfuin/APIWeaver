{
  "apis": [
    {
      "standaloneName": "updatePet",
      "path": "/pet",
      "method": "put",
      "description": "Update an existing pet\nUpdate an existing pet by Id",
      "parameters": [],
      "requestBody": [
        {
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Pet"
          }
        },
        {
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Pet/properties/name"
          }
        },
        {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Pet"
          }
        }
      ],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "Successful operation",
            "$ref": "#/components/schemas/Pet"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "Successful operation",
            "$ref": "#/components/schemas/Pet"
          }
        }
      ],
      "tags": ["pet"]
    },
    {
      "standaloneName": "addPet",
      "path": "/pet",
      "method": "post",
      "description": "Add a new pet to the store\nAdd a new pet to the store",
      "parameters": [],
      "requestBody": [
        {
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Pet"
          }
        },
        {
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Pet"
          }
        },
        {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Pet"
          }
        }
      ],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "Successful operation",
            "$ref": "#/components/schemas/Pet"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "Successful operation",
            "$ref": "#/components/schemas/Pet"
          }
        }
      ],
      "tags": ["pet"]
    },
    {
      "standaloneName": "findPetsByStatus",
      "path": "/pet/findByStatus",
      "method": "get",
      "description": "Finds Pets by status\nMultiple status values can be provided with comma separated strings",
      "parameters": [
        {
          "position": "query",
          "schema": {
            "type": "object",
            "title": "query",
            "required": [],
            "properties": {
              "status": {
                "description": "Status values that need to be considered for filter",
                "type": "string",
                "default": "available",
                "enum": ["available", "pending", "sold"]
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "title": "body",
            "description": "successful operation",
            "items": { "$ref": "#/components/schemas/Pet" }
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "array",
            "title": "body",
            "description": "successful operation",
            "items": { "$ref": "#/components/schemas/Pet" }
          }
        }
      ],
      "tags": ["pet"]
    },
    {
      "standaloneName": "findPetsByTags",
      "path": "/pet/findByTags",
      "method": "get",
      "description": "Finds Pets by tags\nMultiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      "parameters": [
        {
          "position": "query",
          "schema": {
            "type": "object",
            "title": "query",
            "required": [],
            "properties": {
              "tags": {
                "description": "Tags to filter by",
                "type": "array",
                "items": { "type": "string" }
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "title": "body",
            "description": "successful operation",
            "items": { "$ref": "#/components/schemas/Pet" }
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "array",
            "title": "body",
            "description": "successful operation",
            "items": { "$ref": "#/components/schemas/Pet" }
          }
        }
      ],
      "tags": ["pet"]
    },
    {
      "standaloneName": "getPetById",
      "path": "/pet/{petId}",
      "method": "get",
      "description": "Find pet by ID\nReturns a single pet",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["petId"],
            "properties": {
              "petId": {
                "description": "ID of pet to return",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/Pet"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/Pet"
          }
        }
      ],
      "tags": ["pet"]
    },
    {
      "standaloneName": "updatePetWithForm",
      "path": "/pet/{petId}",
      "method": "post",
      "description": "Updates a pet in the store with form data",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["petId"],
            "properties": {
              "petId": {
                "description": "ID of pet that needs to be updated",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        {
          "position": "query",
          "schema": {
            "type": "object",
            "title": "query",
            "required": [],
            "properties": {
              "name": {
                "description": "Name of pet that needs to be updated",
                "type": "string"
              },
              "status": {
                "description": "Status of pet that needs to be updated",
                "type": "string"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [],
      "tags": ["pet"]
    },
    {
      "standaloneName": "deletePet",
      "path": "/pet/{petId}",
      "method": "delete",
      "description": "Deletes a pet\ndelete a pet",
      "parameters": [
        {
          "position": "header",
          "schema": {
            "type": "object",
            "title": "header",
            "required": [],
            "properties": { "api_key": { "description": "", "type": "string" } }
          }
        },
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["petId"],
            "properties": {
              "petId": {
                "description": "Pet id to delete",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [],
      "tags": ["pet"]
    },
    {
      "standaloneName": "uploadFile",
      "path": "/pet/{petId}/uploadImage",
      "method": "post",
      "description": "uploads an image",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["petId"],
            "properties": {
              "petId": {
                "description": "ID of pet to update",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        {
          "position": "query",
          "schema": {
            "type": "object",
            "title": "query",
            "required": [],
            "properties": {
              "additionalMetadata": {
                "description": "Additional Metadata",
                "type": "string"
              }
            }
          }
        }
      ],
      "requestBody": [
        {
          "contentType": "application/octet-stream",
          "schema": { "type": "string", "title": "body", "format": "binary" }
        }
      ],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/ApiResponse"
          }
        }
      ],
      "tags": ["pet"]
    },
    {
      "standaloneName": "getInventory",
      "path": "/store/inventory",
      "method": "get",
      "description": "Returns pet inventories by status\nReturns a map of status codes to quantities",
      "parameters": [],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "additionalProperties": { "type": "integer", "format": "int32" }
          }
        }
      ],
      "tags": ["store"]
    },
    {
      "standaloneName": "placeOrder",
      "path": "/store/order",
      "method": "post",
      "description": "Place an order for a pet\nPlace a new order in the store",
      "parameters": [],
      "requestBody": [
        {
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Order"
          }
        },
        {
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Order"
          }
        },
        {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/Order"
          }
        }
      ],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/Order"
          }
        }
      ],
      "tags": ["store"]
    },
    {
      "standaloneName": "getOrderById",
      "path": "/store/order/{orderId}",
      "method": "get",
      "description": "Find purchase order by ID\nFor valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["orderId"],
            "properties": {
              "orderId": {
                "description": "ID of order that needs to be fetched",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/Order"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/Order"
          }
        }
      ],
      "tags": ["store"]
    },
    {
      "standaloneName": "deleteOrder",
      "path": "/store/order/{orderId}",
      "method": "delete",
      "description": "Delete purchase order by ID\nFor valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["orderId"],
            "properties": {
              "orderId": {
                "description": "ID of the order that needs to be deleted",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [],
      "tags": ["store"]
    },
    {
      "standaloneName": "createUser",
      "path": "/user",
      "method": "post",
      "description": "Create user\nThis can only be done by the logged in user.",
      "parameters": [],
      "requestBody": [
        {
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/User"
          }
        }
      ],
      "responses": [
        {
          "responseCode": "default",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "responseCode": "default",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/User"
          }
        }
      ],
      "tags": ["user"]
    },
    {
      "standaloneName": "createUsersWithListInput",
      "path": "/user/createWithList",
      "method": "post",
      "description": "Creates list of users with given input array\nCreates list of users with given input array",
      "parameters": [],
      "requestBody": [
        {
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "title": "body",
            "items": { "$ref": "#/components/schemas/User" }
          }
        }
      ],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "Successful operation",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "Successful operation",
            "$ref": "#/components/schemas/User"
          }
        }
      ],
      "tags": ["user"]
    },
    {
      "standaloneName": "loginUser",
      "path": "/user/login",
      "method": "get",
      "description": "Logs user into the system",
      "parameters": [
        {
          "position": "query",
          "schema": {
            "type": "object",
            "title": "query",
            "required": [],
            "properties": {
              "username": {
                "description": "The user name for login",
                "type": "string"
              },
              "password": {
                "description": "The password for login in clear text",
                "type": "string"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "string",
            "title": "body",
            "description": "successful operation"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "string",
            "title": "body",
            "description": "successful operation"
          }
        }
      ],
      "tags": ["user"]
    },
    {
      "standaloneName": "logoutUser",
      "path": "/user/logout",
      "method": "get",
      "description": "Logs out current logged in user session",
      "parameters": [],
      "requestBody": [],
      "responses": [],
      "tags": ["user"]
    },
    {
      "standaloneName": "getUserByName",
      "path": "/user/{username}",
      "method": "get",
      "description": "Get user by user name",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["username"],
            "properties": {
              "username": {
                "description": "The name that needs to be fetched. Use user1 for testing. ",
                "type": "string"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [
        {
          "responseCode": "200",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "responseCode": "200",
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "description": "successful operation",
            "$ref": "#/components/schemas/User"
          }
        }
      ],
      "tags": ["user"]
    },
    {
      "standaloneName": "updateUser",
      "path": "/user/{username}",
      "method": "put",
      "description": "Update user\nThis can only be done by the logged in user.",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["username"],
            "properties": {
              "username": {
                "description": "name that need to be deleted",
                "type": "string"
              }
            }
          }
        }
      ],
      "requestBody": [
        {
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "contentType": "application/xml",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/User"
          }
        },
        {
          "contentType": "application/x-www-form-urlencoded",
          "schema": {
            "type": "object",
            "title": "body",
            "$ref": "#/components/schemas/User"
          }
        }
      ],
      "responses": [],
      "tags": ["user"]
    },
    {
      "standaloneName": "deleteUser",
      "path": "/user/{username}",
      "method": "delete",
      "description": "Delete user\nThis can only be done by the logged in user.",
      "parameters": [
        {
          "position": "path",
          "schema": {
            "type": "object",
            "title": "path",
            "required": ["username"],
            "properties": {
              "username": {
                "description": "The name that needs to be deleted",
                "type": "string"
              }
            }
          }
        }
      ],
      "requestBody": [],
      "responses": [],
      "tags": ["user"]
    }
  ],
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": { "type": "integer", "format": "int32", "example": 7 },
          "shipDate": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": { "type": "boolean" }
        },
        "xml": { "name": "order" }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 100000 },
          "username": { "type": "string", "example": "fehguy" },
          "address": {
            "type": "array",
            "xml": { "name": "addresses", "wrapped": true },
            "items": { "$ref": "#/components/schemas/Address" }
          }
        },
        "xml": { "name": "customer" }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "437 Lytton" },
          "city": { "type": "string", "example": "Palo Alto" },
          "state": { "type": "string", "example": "CA" },
          "zip": { "type": "string", "example": "94301" }
        },
        "xml": { "name": "address" }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 1 },
          "name": { "type": "string", "example": "Dogs" }
        },
        "xml": { "name": "category" }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "username": { "type": "string", "example": "theUser" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "James" },
          "email": { "type": "string", "example": "john@email.com" },
          "password": { "type": "string", "example": "12345" },
          "phone": { "type": "string", "example": "12345" },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": { "name": "user" }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" }
        },
        "xml": { "name": "tag" }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "name": { "type": "string", "example": "doggie" },
          "category": { "$ref": "#/components/schemas/Category" },
          "photoUrls": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "type": "string", "xml": { "name": "photoUrl" } }
          },
          "tags": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": { "name": "pet" }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "integer", "format": "int32" },
          "type": { "type": "string" },
          "message": { "type": "string" }
        },
        "xml": { "name": "##default" }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          },
          "application/xml": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/User" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }
    }
  }
}
